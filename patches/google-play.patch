diff --git a/lib/interface/collection/playlist.dart b/lib/interface/collection/playlist.dart
index c8e78a0..6afa253 100644
--- a/lib/interface/collection/playlist.dart
+++ b/lib/interface/collection/playlist.dart
@@ -31,8 +31,6 @@ import 'package:harmonoid/utils/palette_generator.dart';
 import 'package:harmonoid/state/mobile_now_playing_controller.dart';
 import 'package:harmonoid/constants/language.dart';
 
-import 'package:harmonoid/web/utils/widgets.dart';
-
 class PlaylistTab extends StatelessWidget {
   final TextEditingController _controller = new TextEditingController();
 
@@ -172,25 +170,25 @@ class PlaylistTab extends StatelessWidget {
                           ),
                         ),
                       ),
-                      const SizedBox(
-                        width: 4.0,
-                      ),
-                      TextButton(
-                        onPressed: () {
-                          if (isDesktop) {
-                            showDialog(
-                              context: context,
-                              builder: (context) => PlaylistImportDialog(),
-                            );
-                          }
-                        },
-                        child: Text(
-                          Language.instance.IMPORT.toUpperCase(),
-                          style: TextStyle(
-                            color: Theme.of(context).primaryColor,
-                          ),
-                        ),
-                      ),
+                      // const SizedBox(
+                      //   width: 4.0,
+                      // ),
+                      // TextButton(
+                      //   onPressed: () {
+                      //     if (isDesktop) {
+                      //       showDialog(
+                      //         context: context,
+                      //         builder: (context) => PlaylistImportDialog(),
+                      //       );
+                      //     }
+                      //   },
+                      //   child: Text(
+                      //     Language.instance.IMPORT.toUpperCase(),
+                      //     style: TextStyle(
+                      //       color: Theme.of(context).primaryColor,
+                      //     ),
+                      //   ),
+                      // ),
                     ],
                   ),
                 ),
diff --git a/lib/interface/mini_now_playing_bar.dart b/lib/interface/mini_now_playing_bar.dart
index 0503a99..e559b00 100644
--- a/lib/interface/mini_now_playing_bar.dart
+++ b/lib/interface/mini_now_playing_bar.dart
@@ -17,7 +17,6 @@ import 'package:media_library/media_library.dart';
 import 'package:extended_image/extended_image.dart';
 import 'package:flutter_lyric/lyrics_reader.dart';
 import 'package:flutter_lyric/lyrics_reader_model.dart';
-import 'package:flutter_speed_dial/flutter_speed_dial.dart';
 
 import 'package:harmonoid/core/playback.dart';
 import 'package:harmonoid/core/collection.dart';
@@ -34,7 +33,6 @@ import 'package:harmonoid/state/mobile_now_playing_controller.dart';
 import 'package:harmonoid/interface/now_playing_bar.dart';
 import 'package:harmonoid/interface/collection/track.dart';
 import 'package:harmonoid/constants/language.dart';
-import 'package:harmonoid/web/utils/widgets.dart';
 
 const kDetailsAreaHeight = 100.0;
 
@@ -2222,156 +2220,115 @@ class MiniNowPlayingBarRefreshCollectionButtonState
               ),
               builder: (context, color, _) => Container(
                 child: widget.index.value == 3
-                    ? SpeedDial(
-                        icon: Icons.add,
-                        activeIcon: Icons.close,
-                        spacing: 8.0,
-                        heroTag: 'create-playlist-fab',
-                        animationCurve: Curves.easeInOut,
-                        animationDuration: const Duration(milliseconds: 200),
-                        children: [
-                          SpeedDialChild(
-                            child: const Icon(Icons.downloading),
-                            label: Language.instance.IMPORT,
-                            visible: true,
-                            onTap: () {
-                              showModalBottomSheet(
-                                isScrollControlled: true,
-                                constraints: BoxConstraints(
-                                  maxHeight: double.infinity,
-                                ),
-                                context: context,
-                                elevation: kDefaultHeavyElevation,
-                                useRootNavigator: true,
-                                builder: (context) => StatefulBuilder(
-                                  builder: (context, setState) {
-                                    return PlaylistImportBottomSheet();
-                                  },
-                                ),
-                              );
-                            },
-                          ),
-                          SpeedDialChild(
-                            child: const Icon(Icons.edit),
-                            label: Language.instance.CREATE,
-                            visible: true,
-                            onTap: () async {
-                              String text = '';
-                              await showModalBottomSheet(
-                                isScrollControlled: true,
-                                context: context,
-                                elevation: kDefaultHeavyElevation,
-                                useRootNavigator: true,
-                                builder: (context) => StatefulBuilder(
-                                  builder: (context, setState) {
-                                    return Container(
-                                      margin: EdgeInsets.only(
-                                        bottom: MediaQuery.of(context)
-                                                .viewInsets
-                                                .bottom -
-                                            MediaQuery.of(context)
-                                                .padding
-                                                .bottom,
-                                      ),
-                                      padding: EdgeInsets.all(8.0),
-                                      child: Column(
-                                        mainAxisSize: MainAxisSize.min,
-                                        crossAxisAlignment:
-                                            CrossAxisAlignment.stretch,
-                                        children: [
-                                          const SizedBox(height: 4.0),
-                                          TextField(
-                                            textCapitalization:
-                                                TextCapitalization.words,
-                                            textInputAction:
-                                                TextInputAction.done,
-                                            autofocus: true,
-                                            onChanged: (value) => text = value,
-                                            onSubmitted: (String value) async {
-                                              if (value.isNotEmpty) {
-                                                FocusScope.of(context)
-                                                    .unfocus();
-                                                await Collection.instance
-                                                    .playlistCreateFromName(
-                                                        value);
-                                                Navigator.of(context)
-                                                    .maybePop();
-                                              }
-                                            },
-                                            decoration: InputDecoration(
-                                              contentPadding:
-                                                  EdgeInsets.fromLTRB(
-                                                12,
-                                                30,
-                                                12,
-                                                6,
-                                              ),
-                                              hintText: Language.instance
-                                                  .PLAYLISTS_TEXT_FIELD_LABEL,
-                                              border: OutlineInputBorder(
-                                                borderSide: BorderSide(
-                                                  color: Theme.of(context)
-                                                      .iconTheme
-                                                      .color!
-                                                      .withOpacity(0.4),
-                                                  width: 1.8,
-                                                ),
-                                              ),
-                                              enabledBorder: OutlineInputBorder(
-                                                borderSide: BorderSide(
-                                                  color: Theme.of(context)
-                                                      .iconTheme
-                                                      .color!
-                                                      .withOpacity(0.4),
-                                                  width: 1.8,
-                                                ),
-                                              ),
-                                              focusedBorder: OutlineInputBorder(
-                                                borderSide: BorderSide(
-                                                  color: Theme.of(context)
-                                                      .primaryColor,
-                                                  width: 1.8,
-                                                ),
-                                              ),
+                    ? FloatingActionButton(
+                        tooltip: Language.instance.CREATE,
+                        child: const Icon(Icons.edit),
+                        backgroundColor: color as Color?,
+                        onPressed: () async {
+                          String text = '';
+                          await showModalBottomSheet(
+                            isScrollControlled: true,
+                            context: context,
+                            elevation: kDefaultHeavyElevation,
+                            useRootNavigator: true,
+                            backgroundColor: Theme.of(context).cardTheme.color,
+                            builder: (context) => StatefulBuilder(
+                              builder: (context, setState) {
+                                return Container(
+                                  margin: EdgeInsets.only(
+                                    bottom: MediaQuery.of(context)
+                                            .viewInsets
+                                            .bottom -
+                                        MediaQuery.of(context).padding.bottom,
+                                  ),
+                                  padding: EdgeInsets.all(8.0),
+                                  child: Column(
+                                    mainAxisSize: MainAxisSize.min,
+                                    crossAxisAlignment:
+                                        CrossAxisAlignment.stretch,
+                                    children: [
+                                      const SizedBox(height: 4.0),
+                                      TextField(
+                                        textCapitalization:
+                                            TextCapitalization.words,
+                                        textInputAction: TextInputAction.done,
+                                        autofocus: true,
+                                        onChanged: (value) => text = value,
+                                        onSubmitted: (String value) async {
+                                          if (value.isNotEmpty) {
+                                            FocusScope.of(context).unfocus();
+                                            await Collection.instance
+                                                .playlistCreateFromName(value);
+                                            Navigator.of(context).maybePop();
+                                          }
+                                        },
+                                        decoration: InputDecoration(
+                                          contentPadding: EdgeInsets.fromLTRB(
+                                            12,
+                                            30,
+                                            12,
+                                            6,
+                                          ),
+                                          hintText: Language.instance
+                                              .PLAYLISTS_TEXT_FIELD_LABEL,
+                                          border: OutlineInputBorder(
+                                            borderSide: BorderSide(
+                                              color: Theme.of(context)
+                                                  .iconTheme
+                                                  .color!
+                                                  .withOpacity(0.4),
+                                              width: 1.8,
                                             ),
                                           ),
-                                          const SizedBox(height: 4.0),
-                                          ElevatedButton(
-                                            onPressed: () async {
-                                              if (text.isNotEmpty) {
-                                                FocusScope.of(context)
-                                                    .unfocus();
-                                                await Collection.instance
-                                                    .playlistCreateFromName(
-                                                  text,
-                                                );
-                                                Navigator.of(context)
-                                                    .maybePop();
-                                              }
-                                            },
-                                            style: ButtonStyle(
-                                              backgroundColor:
-                                                  MaterialStateProperty.all(
-                                                Theme.of(context).primaryColor,
-                                              ),
+                                          enabledBorder: OutlineInputBorder(
+                                            borderSide: BorderSide(
+                                              color: Theme.of(context)
+                                                  .iconTheme
+                                                  .color!
+                                                  .withOpacity(0.4),
+                                              width: 1.8,
                                             ),
-                                            child: Text(
-                                              Language.instance.CREATE
-                                                  .toUpperCase(),
-                                              style: const TextStyle(
-                                                letterSpacing: 2.0,
-                                              ),
+                                          ),
+                                          focusedBorder: OutlineInputBorder(
+                                            borderSide: BorderSide(
+                                              color: Theme.of(context)
+                                                  .primaryColor,
+                                              width: 1.8,
                                             ),
                                           ),
-                                        ],
+                                        ),
                                       ),
-                                    );
-                                  },
-                                ),
-                              );
-                            },
-                          ),
-                        ],
+                                      const SizedBox(height: 4.0),
+                                      ElevatedButton(
+                                        onPressed: () async {
+                                          if (text.isNotEmpty) {
+                                            FocusScope.of(context).unfocus();
+                                            await Collection.instance
+                                                .playlistCreateFromName(
+                                              text,
+                                            );
+                                            Navigator.of(context).maybePop();
+                                          }
+                                        },
+                                        style: ButtonStyle(
+                                          backgroundColor:
+                                              MaterialStateProperty.all(
+                                            Theme.of(context).primaryColor,
+                                          ),
+                                        ),
+                                        child: Text(
+                                          Language.instance.CREATE
+                                              .toUpperCase(),
+                                          style: TextStyle(letterSpacing: 2.0),
+                                        ),
+                                      ),
+                                    ],
+                                  ),
+                                );
+                              },
+                            ),
+                          );
+                        },
                       )
                     : RefreshCollectionButton(
                         color: color as Color?,
diff --git a/lib/interface/settings/about.dart b/lib/interface/settings/about.dart
index 669bb09..47957fe 100644
--- a/lib/interface/settings/about.dart
+++ b/lib/interface/settings/about.dart
@@ -105,6 +105,7 @@ class _AboutPageState extends State<AboutPage> {
                               Text(
                                 [
                                   kVersion,
+                                  'Google Play',
                                 ].join(' • '),
                                 style: Theme.of(context).textTheme.displaySmall,
                               ),
@@ -150,44 +151,6 @@ class _AboutPageState extends State<AboutPage> {
                               : null,
                         ),
                       ),
-                      ListTile(
-                        onTap: () => open(URL.patreon),
-                        leading: CircleAvatar(
-                          backgroundColor: Colors.transparent,
-                          foregroundColor: Theme.of(context).iconTheme.color,
-                          child: SvgPicture.string(
-                            SVG.patreon,
-                            height: 20.0,
-                            width: 20.0,
-                            color: Theme.of(context).iconTheme.color,
-                          ),
-                        ),
-                        title: Text(
-                          Label.become_a_patreon,
-                          style: isDesktop
-                              ? Theme.of(context).textTheme.headlineMedium
-                              : null,
-                        ),
-                      ),
-                      ListTile(
-                        onTap: () => open(URL.paypal),
-                        leading: CircleAvatar(
-                          backgroundColor: Colors.transparent,
-                          foregroundColor: Theme.of(context).iconTheme.color,
-                          child: SvgPicture.string(
-                            SVG.paypal,
-                            height: 20.0,
-                            width: 20.0,
-                            color: Theme.of(context).iconTheme.color,
-                          ),
-                        ),
-                        title: Text(
-                          Label.donate_with_paypal,
-                          style: isDesktop
-                              ? Theme.of(context).textTheme.headlineMedium
-                              : null,
-                        ),
-                      ),
                       ListTile(
                         onTap: () => open(URL.license),
                         leading: CircleAvatar(
diff --git a/lib/utils/widgets.dart b/lib/utils/widgets.dart
index 370a5e6..708e038 100644
--- a/lib/utils/widgets.dart
+++ b/lib/utils/widgets.dart
@@ -38,7 +38,6 @@ import 'package:harmonoid/interface/file_info_screen.dart';
 import 'package:harmonoid/interface/settings/settings.dart';
 import 'package:harmonoid/interface/settings/about.dart';
 import 'package:harmonoid/constants/language.dart';
-import 'package:harmonoid/web/web.dart';
 
 import 'package:harmonoid/main.dart';
 
@@ -1118,7 +1117,6 @@ class ExceptionWidget extends StatelessWidget {
               Language.instance.NO_INTERNET_TITLE: VisualAssets.library,
               Language.instance.COLLECTION_SEARCH_NO_RESULTS_TITLE:
                   VisualAssets.searchPage,
-              Language.instance.WEB_WELCOME_TITLE: VisualAssets.searchNotes,
               Language.instance.COLLECTION_SEARCH_LABEL:
                   VisualAssets.searchPage,
             }[title]!,
@@ -2489,65 +2487,17 @@ class CollectionMoreButton extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    return ContextMenuButton<int>(
-      padding: EdgeInsets.zero,
-      offset: Offset.fromDirection(pi / 2, 64.0),
+    return IconButton(
+      tooltip: Language.instance.READ_METADATA,
       icon: Icon(
-        Icons.more_vert,
-        size: 20.0,
+        Icons.code,
         color: Theme.of(context).appBarTheme.actionsIconTheme?.color,
       ),
-      elevation: 4.0,
-      onSelected: (value) async {
-        switch (value) {
-          case 0:
-            {
-              FileInfoScreen.show(context);
-              break;
-            }
-          case 1:
-            {
-              Navigator.of(context).push(
-                PageRouteBuilder(
-                  pageBuilder: (context, animation, secondaryAnimation) =>
-                      FadeThroughTransition(
-                    fillColor: Colors.transparent,
-                    animation: animation,
-                    secondaryAnimation: secondaryAnimation,
-                    child: WebTab(),
-                  ),
-                ),
-              );
-              break;
-            }
-        }
+      splashRadius: 20.0,
+      iconSize: 20.0,
+      onPressed: () async {
+        return FileInfoScreen.show(context);
       },
-      itemBuilder: (context) => [
-        PopupMenuItem(
-          value: 0,
-          child: ListTile(
-            contentPadding: EdgeInsets.zero,
-            dense: true,
-            leading: Icon(Icons.code),
-            title: Text(
-              Language.instance.READ_METADATA,
-              style: Theme.of(context).textTheme.headlineMedium,
-            ),
-          ),
-        ),
-        PopupMenuItem(
-          value: 1,
-          child: ListTile(
-            contentPadding: EdgeInsets.zero,
-            dense: true,
-            leading: Icon(Icons.waves),
-            title: Text(
-              Language.instance.STREAM,
-              style: Theme.of(context).textTheme.headlineMedium,
-            ),
-          ),
-        ),
-      ],
     );
   }
 }
@@ -2960,13 +2910,6 @@ class _MobileAppBarOverflowButtonState
                 title: Text(Language.instance.READ_METADATA),
               ),
             ),
-            PopupMenuItem(
-              value: 2,
-              child: ListTile(
-                leading: Icon(Icons.waves),
-                title: Text(Language.instance.STREAM),
-              ),
-            ),
             PopupMenuItem(
               value: 3,
               child: ListTile(
@@ -3174,21 +3117,6 @@ class _MobileAppBarOverflowButtonState
                 await FileInfoScreen.show(context);
                 break;
               }
-            case 2:
-              {
-                await Navigator.push(
-                  context,
-                  PageRouteBuilder(
-                    pageBuilder: (context, animation, secondaryAnimation) =>
-                        FadeThroughTransition(
-                      animation: animation,
-                      secondaryAnimation: secondaryAnimation,
-                      child: WebTab(),
-                    ),
-                  ),
-                );
-                break;
-              }
             case 3:
               {
                 await Navigator.push(
diff --git a/pubspec.linux.yaml b/pubspec.linux.yaml
index 0a2047d..90f2ba6 100644
--- a/pubspec.linux.yaml
+++ b/pubspec.linux.yaml
@@ -85,7 +85,6 @@ dependencies:
   auto_size_text: ^3.0.0
   uuid: ^3.0.6
   synchronized: ^3.0.0+2
-  flutter_speed_dial: ^6.0.0
   flutter_svg: ^1.1.4
 
   # Third-party forked plugins & packages to meet requirements.
diff --git a/pubspec.yaml b/pubspec.yaml
index 7b0261a..9eca7d0 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -85,7 +85,6 @@ dependencies:
   auto_size_text: ^3.0.0
   uuid: ^3.0.6
   synchronized: ^3.0.0+2
-  flutter_speed_dial: ^6.0.0
   flutter_svg: ^1.1.4
 
   # Third-party forked plugins & packages to meet requirements.
